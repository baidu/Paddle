diff --git a/paddle/cinn/ir/group_schedule/dy_shape_group_scheduler.cc b/paddle/cinn/ir/group_schedule/dy_shape_group_scheduler.cc
index fb0b2cadc6..f63e6c2356 100644
--- a/paddle/cinn/ir/group_schedule/dy_shape_group_scheduler.cc
+++ b/paddle/cinn/ir/group_schedule/dy_shape_group_scheduler.cc
@@ -20,6 +20,7 @@
 #include "paddle/cinn/ir/group_schedule/tactic/compute_at_reduction_tactic.h"
 #include "paddle/cinn/ir/group_schedule/tactic/compute_inline_tactic.h"
 #include "paddle/cinn/ir/group_schedule/tactic/tile_broadcast_tactic.h"
+#include "paddle/cinn/ir/group_schedule/tactic/tile_discrete_tactic.h"
 #include "paddle/cinn/ir/group_schedule/tactic/tile_first_general_tactic.h"
 #include "paddle/cinn/ir/ir_analyzer/ir_analyzer.h"
 #include "paddle/cinn/ir/op/ir_operators.h"
@@ -36,6 +37,7 @@ void DynamicShapeGroupScheduler::Init() {
   InitBuckets();
   tactics_.emplace_back(CreateAlignIterSpaceTactic());
   tactics_.emplace_back(CreateTileBroadcastTactic());
+  tactics_.emplace_back(CreateTileDiscreteTactic());
   tactics_.emplace_back(CreateTileFirstGeneralTactic());
   tactics_.emplace_back(CreateComputeInlineTactic());
   tactics_.emplace_back(CreateComputeAtReductionTactic());
diff --git a/paddle/cinn/ir/group_schedule/tactic/CMakeLists.txt b/paddle/cinn/ir/group_schedule/tactic/CMakeLists.txt
index 9dc351c3ac..384cdd70b9 100644
--- a/paddle/cinn/ir/group_schedule/tactic/CMakeLists.txt
+++ b/paddle/cinn/ir/group_schedule/tactic/CMakeLists.txt
@@ -8,4 +8,5 @@ gather_srcs(cinnapi_src SRCS compute_at_reduction_tactic.cc)
 gather_srcs(cinnapi_src SRCS bind_cuda_tactic.cc)
 gather_srcs(cinnapi_src SRCS arrange_storage_tactic.cc)
 gather_srcs(cinnapi_src SRCS tile_broadcast_tactic.cc)
+gather_srcs(cinnapi_src SRCS tile_discrete_tactic.cc)
 gather_srcs(cinnapi_src SRCS tile_first_general_tactic.cc)
diff --git a/paddle/cinn/ir/group_schedule/tactic/tile_discrete_tactic.cc b/paddle/cinn/ir/group_schedule/tactic/tile_discrete_tactic.cc
index 23d7701426..11396b9fc8 100644
--- a/paddle/cinn/ir/group_schedule/tactic/tile_discrete_tactic.cc
+++ b/paddle/cinn/ir/group_schedule/tactic/tile_discrete_tactic.cc
@@ -27,9 +27,12 @@ using cinn::ir::analyzer::IsReductionSBlock;
 
 bool UseDiscreteDataTile(const ScheduleConfig& config) {
   // use disrete data tile for [RS]
-  if (config.base_info->iter_space_type.size() != 1 &&
-      config.base_info->iter_space_type.back().first == "S") {
+  for (const auto& iter_space : config.base_info->iter_space_type) {
+    if (iter_space.first == "R") {
+      if (config.base_info->iter_space_type.back().first == "S") {
         return true;
+      }
+    }
   }
   return false;
 }
@@ -43,8 +46,6 @@ class TileDiscreteTactic final : public ScheduleTactic {
   std::string TacticName() const override { return "TileDiscreteTactic"; }
 
  private:
-  void AlignToReduceInput(ir::IRSchedule* sch, const std::string& block_id);
-  void MergeFlattenAxis(ir::IRSchedule* sch, const std::string& block_id);
   void MergeDiscreteFlattenAxis(ir::IRSchedule* sch,
                                 const std::string& block_id);
   void MergeReduceAxis(ir::IRSchedule* sch, const std::string& block_id);
@@ -127,10 +128,6 @@ void TileDiscreteTactic::Apply(ir::IRSchedule* sch,
   if (ir::IsReduceInitTensorName(block_id)) return;
 
   
-  AlignToReduceInput(sch, block_id);
-  VLOG(4) << "After AlignToReduceInput on block: [" << block_id
-          << "], loop nest:\n"
-          << sch->GetLoops(block_id)[0];
   MergeReduceAxis(sch, block_id);
   VLOG(4) << "After MergeReduceAxis on block: [" << block_id
           << "], loop nest:\n"
@@ -158,50 +155,6 @@ void TileDiscreteTactic::Apply(ir::IRSchedule* sch,
 }
 
 
-void TileDiscreteTactic::AlignToReduceInput(ir::IRSchedule* sch,
-                                            const std::string& block_id) {
-  const auto& loop_strides = context_->config.base_info->loop_strides;
-  if (loop_strides.empty()) {
-    return;
-  }
-
-  std::vector<ir::Expr> loops = sch->GetLoops(block_id);
-  std::vector<int64_t> loop_perm(loops.size());
-  std::iota(loop_perm.begin(), loop_perm.end(), 0);
-
-  const auto IsReduce = [&](int64_t axis) {
-    auto& reduce_axis = context_->config.base_info->reduce_axis;
-    return std::find(reduce_axis.begin(), reduce_axis.end(), axis) !=
-           reduce_axis.end();
-  };
-
-  std::sort(loop_perm.begin(), loop_perm.end(), [&](int64_t a, int64_t b) {
-    if (IsReduce(a) == IsReduce(b)) {
-      return loop_strides[a] > loop_strides[b];
-    }
-    return IsReduce(b);
-  });
-  VLOG(4) << "loop_perm: " << utils::Join(loop_perm, ", ");
-
-  // Reorder S/R loops seperately, otherwise reduce_init will be de-inlined.
-  std::vector<Expr> sp_loops, rd_loops;
-  for (auto i : loop_perm) {
-    if (IsReduce(i)) {
-      rd_loops.push_back(loops[i]);
-    } else if (loop_strides[i] != 0) {
-      sp_loops.push_back(loops[i]);
-    }
-  }
-  sch->Reorder(sp_loops);
-  sch->Reorder(rd_loops);
-}
-
-void TileDiscreteTactic::MergeFlattenAxis(ir::IRSchedule* sch,
-                                          const std::string& block_id) {
-  if (vec_flatten_axis_.size() >= 2) {
-    sch->Fuse(block_id, vec_flatten_axis_);
-  }
-}
 
 void TileDiscreteTactic::MergeDiscreteFlattenAxis(
     ir::IRSchedule* sch, const std::string& block_id) {
diff --git a/paddle/cinn/ir/group_schedule/tactic/tile_first_general_tactic.cc b/paddle/cinn/ir/group_schedule/tactic/tile_first_general_tactic.cc
index 1022c97420..e19fe0a98f 100644
--- a/paddle/cinn/ir/group_schedule/tactic/tile_first_general_tactic.cc
+++ b/paddle/cinn/ir/group_schedule/tactic/tile_first_general_tactic.cc
@@ -25,17 +25,6 @@ namespace ir {
 
 using cinn::ir::analyzer::IsReductionSBlock;
 
-bool UseContinuousDataTile(const ScheduleConfig& config) {
-  // use continuous data tile for [S] and [...R]
-  if (config.base_info->iter_space_type.size() == 1 &&
-      config.base_info->iter_space_type.back().first == "S") {
-    return true;
-  }
-  if (config.base_info->iter_space_type.back().first == "R") {
-    return true;
-  }
-  return false;
-}
 
 class TileFirstGeneralTactic final : public ScheduleTactic {
  public:
@@ -49,14 +38,9 @@ class TileFirstGeneralTactic final : public ScheduleTactic {
 
  private:
   void MergeFlattenAxis(ir::IRSchedule* sch, const std::string& block_id);
-  void MergeDiscreteFlattenAxis(ir::IRSchedule* sch,
-                                const std::string& block_id);
   void MergeReduceAxis(ir::IRSchedule* sch, const std::string& block_id);
-  void SplitSptialInner(ir::IRSchedule* sch, const std::string& block_id);
-  void SplitReduceInner(ir::IRSchedule* sch, const std::string& block_id);
   void VariableTypeAssignment(ir::IRSchedule* sch, const std::string& block_id);
   void SetReduceType(ir::IRSchedule* sch, const std::string& block_id);
-  void SetDiscreteReduceType(ir::IRSchedule* sch, const std::string& block_id);
   void BindCudaInfo(ir::IRSchedule* sch, const std::string& block_id);
 
  private:
@@ -127,36 +111,9 @@ void TileFirstGeneralTactic::Apply(ir::IRSchedule* sch,
   if (!can_apply_) return;
   if (ir::IsReduceInitTensorName(block_id)) return;
 
-  if (UseContinuousDataTile(context_->config)) {
-    VLOG(4) << "Using ApplyContinuousDataTile";
-    ApplyContinuousDataTile(sch, block_id);
-    return;
-  }
-
-  MergeReduceAxis(sch, block_id);
-  VLOG(6) << "After MergeReduceAxis on block: [" << block_id
-          << "], loop nest:\n"
-          << sch->GetLoops(block_id)[0];
-  MergeDiscreteFlattenAxis(sch, block_id);
-  VLOG(6) << "After MergeDiscreteFlattenAxis on block: [" << block_id
-          << "], loop nest:\n"
-          << sch->GetLoops(block_id)[0];
-  SplitSptialInner(sch, block_id);
-  VLOG(6) << "After SplitSptialInner on block: [" << block_id
-          << "], loop nest:\n"
-          << sch->GetLoops(block_id)[0];
-  SplitReduceInner(sch, block_id);
-  VLOG(6) << "After SplitReduceInner on block: [" << block_id
-          << "], loop nest:\n"
-          << sch->GetLoops(block_id)[0];
-  BindCudaInfo(sch, block_id);
-  VLOG(6) << "After BindCudaInfo on block: [" << block_id << "], loop nest:\n"
-          << sch->GetLoops(block_id)[0];
-  VariableTypeAssignment(sch, block_id);
-  VLOG(6) << "After VariableTypeAssignment on block: [" << block_id
-          << "], loop nest:\n"
-          << sch->GetLoops(block_id)[0];
-  SetDiscreteReduceType(sch, block_id);
+  VLOG(4) << "Using ApplyContinuousDataTile";
+  ApplyContinuousDataTile(sch, block_id);
+  return;
 }
 
 void TileFirstGeneralTactic::ApplyContinuousDataTile(
@@ -294,18 +251,6 @@ void TileFirstGeneralTactic::MergeFlattenAxis(ir::IRSchedule* sch,
   }
 }
 
-void TileFirstGeneralTactic::MergeDiscreteFlattenAxis(
-    ir::IRSchedule* sch, const std::string& block_id) {
-  // Note: We need to fuse loops from bottom to top,
-  // because the loop index will be changed when the upper loops fused.
-  if (vec_spatial_axis_last_.size() >= 2) {
-    sch->Fuse(block_id, vec_spatial_axis_last_);
-  }
-  if (vec_spatial_axis_first_.size() >= 2) {
-    sch->Fuse(block_id, vec_spatial_axis_first_);
-  }
-}
-
 void TileFirstGeneralTactic::MergeReduceAxis(ir::IRSchedule* sch,
                                              const std::string& block_id) {
   std::vector<ir::Expr> loops = sch->GetLoops(block_id);
@@ -326,64 +271,6 @@ void TileFirstGeneralTactic::MergeReduceAxis(ir::IRSchedule* sch,
   }
 }
 
-void TileFirstGeneralTactic::SplitSptialInner(ir::IRSchedule* sch,
-                                              const std::string& block_id) {
-  auto loops = sch->GetLoops(block_id);
-  if (loops.size() == 3) {
-    // [S, S', R] => [S, S'(-1), S'(32), R]
-    auto split_loops = sch->Split(loops[1], std::vector<int>({-1, 32}));
-    // [S, S'(-1), S'(32), R] => [S, S'(32), R]
-    sch->Fuse(block_id, std::vector<int>{0, 1});
-  } else if (loops.size() == 2) {
-    // [S, R] => [S(-1), S(32), R]
-    auto split_loops = sch->Split(loops[0], std::vector<int>({-1, 32}));
-  }
-}
-
-void TileFirstGeneralTactic::SplitReduceInner(ir::IRSchedule* sch,
-                                              const std::string& block_id) {
-  const int64_t rd_block = context_->config.tile_config.grid_reduce_num;
-  const int64_t rd_thread = 16;
-  const int cur_reduce_axis = 2;
-
-  // [ R ] => [ rd_block*rd_thread, rd_inner ]
-  auto loops = sch->GetLoops(block_id);
-  sch->Split(loops[cur_reduce_axis],
-             std::vector<int>{-1, rd_block * rd_thread});
-  loops = sch->GetLoops(block_id);
-  sch->Reorder({loops[cur_reduce_axis + 1], loops[cur_reduce_axis]});
-
-  loops = sch->GetLoops(block_id);
-  if (IsReductionSBlock(sch->GetBlock(block_id)) &&
-      ir::GetLoopExtent(loops[2]) != 1) {
-    ir::Expr rf_tensor =
-        sch->FactorizeReduction(loops[cur_reduce_axis],
-                                /* rf_axis = */ 0,
-                                /* with_write_back_block_init = */ false);
-    map_rf_block_[block_id] = rf_tensor.as_tensor_ref()->name;
-  }
-
-  // [ rd_block*rd_thread ] => [ rd_block, rd_thread ]
-  if (rd_block > 1) {
-    loops = sch->GetLoops(block_id);
-    sch->Split(loops[cur_reduce_axis], {rd_block, rd_thread});
-
-    if (IsReductionSBlock(sch->GetBlock(block_id))) {
-      loops = sch->GetLoops(map_rf_block_[block_id]);
-      sch->Split(loops[cur_reduce_axis], {rd_block, rd_thread});
-
-      loops = sch->GetLoops(block_id);
-      ir::Expr rf_tensor =
-          sch->FactorizeReduction(loops[cur_reduce_axis],
-                                  /* rf_axis = */ 0,
-                                  /* with_write_back_block_init = */ false);
-      std::string tensor_name = rf_tensor.as_tensor_ref()->name;
-      map_global_rf_block_[block_id] = tensor_name;
-      rf_tensor.as_tensor_ref()->WithBuffer("global", "_" + tensor_name);
-    }
-  }
-}
-
 void TileFirstGeneralTactic::VariableTypeAssignment(
     ir::IRSchedule* sch, const std::string& block_id) {
   const auto IsOutputTensor = [&](const std::string& tensor_name) -> bool {
@@ -415,21 +302,6 @@ void TileFirstGeneralTactic::SetReduceType(ir::IRSchedule* sch,
   }
 }
 
-void TileFirstGeneralTactic::SetDiscreteReduceType(
-    ir::IRSchedule* sch, const std::string& block_id) {
-  if (IsReductionSBlock(sch->GetBlock(block_id))) {
-    auto block = sch->GetBlock(block_id)
-                     .As<ir::ScheduleBlockRealize>()
-                     ->schedule_block.As<ir::ScheduleBlock>();
-    block->reduce_method = cinn::ir::DiscreteReduceMethod();
-  }
-  if (map_global_rf_block_.count(block_id) > 0) {
-    auto block = sch->GetBlock(map_global_rf_block_[block_id])
-                     .As<ir::ScheduleBlockRealize>()
-                     ->schedule_block.As<ir::ScheduleBlock>();
-    block->reduce_method = cinn::ir::DiscreteReduceMethod();
-  }
-}
 
 void TileFirstGeneralTactic::BindCudaInfo(ir::IRSchedule* sch,
                                           const std::string& block_id) {
