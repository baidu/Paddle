name: PR-CI-SOT

on:
  workflow_call:
    inputs:
      PR_ID:
        description: 'PR number'
        required: true
        type: string
      COMMIT_ID:
        description: 'commit number'
        required: true
        type: string

env:
  dockerfile: Dockerfile.cuda9_cudnn7_gcc48_py35_centos6
  docker-image: 077ca344c322

defaults:
  run:
    shell: bash

jobs:
  build-test:
    runs-on:
      group: GZ_BD-CPU

    steps:
    # sudo usermod -aG docker $USER
    - name: Check docker image and run container
      run: |
        # if ! docker image inspect ${docker-image} > /dev/null 2>&1; then
        #   cd ..
        #   wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/refs/heads/develop/tools/dockerfile/ci_dockerfile.sh
        #   wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/refs/heads/develop/tools/dockerfile/Dockerfile.ubuntu20
        #   bash ci_dockerfile.sh
        #   docker build -t ${docker-image} -f ${dockerfile} .
        # fi
        docker run -i --name paddle-CI \
          -v cfs:/home/data/cfs \
          -v gzcfs:/home/data/gzcfs \
          -v shm:/dev/shm \
          -e PR_ID=${{ inputs.PR_ID }} \
          -e COMMIT_ID=${{ inputs.COMMIT_ID }} \
          -e FLAGS_fraction_of_gpu_memory_to_use=0.15 \
          -e CTEST_OUTPUT_ON_FAILURE=1 \
          -e CTEST_PARALLEL_LEVEL=2 \
          -e WITH_GPU=OFF \
          -e WITH_CACHE=ON \
          -e WITH_AVX=OFF \
          -e WITH_MKL=OFF \
          -e WITH_TESTING=OFF \
          -e WITH_COVERAGE=OFF \
          -e COVERALLS_UPLOAD=OFF \
          -e GIT_PR_ID=${{ inputs.PR_ID }} \
          -e PADDLE_VERSION=0.0.0 \
          -e CMAKE_BUILD_TYPE=Release \
          -e PADDLE_FRACTION_GPU_MEMORY_TO_USE=0.15 \
          -e WITH_DISTRIBUTE=OFF \
          -e RUN_TEST=OFF \
          -e PRECISION_TEST=OFF \
          -e PREC_SUFFIX=.py3 \
          -e WITH_UNITY_BUILD=ON \
          -e TIMEOUT_DEBUG_HEL=OFF \
          -e PY_VERSION=3.10 \
          -e CI_SKIP_CPP_TEST=OFF \
          -e PROC_RUN=12 \
          -e FLAGS_enable_eager_mode=1 \
          -e WITH_TENSORRT=OFF \
          -e WITH_NEWIR=ON \
          -e GENERATOR=Ninja \
          -e WITH_INFERENCE_API_TEST=OFF \
          -e CCACHE_MAXSIZE=150G \
          -e CCACHE_LIMIT_MULTIPLE=0.8 \
          -w /workspace --network host ${{ env.docker-image }} /bin/bash
      # working_directory: ./tools/dockerfile/

    - name: Download paddle and update
      run: |
        docker start paddle-CI
        docker exec -i paddle-CI /bin/bash
        pwd
        ln -s /home/data/cfs/.cache /root/.cache
        wget -q --no-proxy https://paddle-github-action.bj.bcebos.com/PR/Paddle/${PR_ID}/${COMMIT_ID}/Paddle.tar.gz
        tar xf Paddle.tar.gz
        cd Paddle
        git config --global user.name "PaddleCI"
        git config --global user.email "paddle_ci@example.com"
        git remote add upstream https://github.com/PaddlePaddle/Paddle.git
        git checkout develop
        git_code=1
        set +e
        git pull upstream develop
        if [ $? -eq 0 ]; then
          git_code=0
          echo 'git pull succeed with'
        else
          proxy="${{ vars.PADDLE_PROXY }}"
          echo "::add-mask::$proxy"
          export http_proxy=$proxy
          export https_proxy=$proxy
          git pull upstream develop
          if [ $? -eq 0 ]; then
            git_code=0
            echo 'git pull succeed with'
          else
            echo "proxy filed"
            exit 2
          fi
        fi
        set -e
        git checkout test
        git merge develop

    - name: Configure cache and ccache
      run: |
        docker start paddle-CI
        docker exec -i paddle-CI /bin/bash
        mkdir -p /home/data/cfs/.cache/build
        echo "CACHE_DIR=/home/data/cfs/.cache/build" >> $GITHUB_ENV
        if [ -f '/home/data/gzcfs/gz.txt' ];then
          mkdir -p /home/data/gzcfs/.ccache/sot
          echo "CCACHE_DIR=/home/data/gzcfs/.ccache/sot" >> $GITHUB_ENV
        else
          mkdir -p /home/data/cfs/.ccache/sot
          echo "CCACHE_DIR=/home/data/cfs/.ccache/sot" >> $GITHUB_ENV
        fi

    - name: Check sot
      env:
        work_dir: "/workspace/Paddle"
        PADDLE_ROOT: "/workspace/Paddle"
      run: |
        docker start paddle-CI
        docker exec -i paddle-CI /bin/bash
        EXCODE=0
        set +e
        PATH=/usr/local/bin:${PATH}
        ln -sf $(which python3.10) /usr/local/bin/python
        ln -sf $(which pip3.10) /usr/local/bin/pip
        bash -x ${work_dir}/paddle/scripts/paddle_build.sh cicheck_sot;EXCODE=$?
        echo "EXCODE=$EXCODE" >> $GITHUB_ENV

    - name: Check result
      run: |
        docker start paddle-CI
        docker exec -i paddle-CI /bin/bash
        if [[ $EXCODE -eq 0 ]];then
          echo "Congratulations!  Your PR passed the paddle-build."
        elif [[ $EXCODE -eq 4 ]];then
          echo "Sorry, your code style check failed."
        elif [[ $EXCODE -eq 5 ]];then
          echo "Sorry, API's example code check failed."
        elif [[ $EXCODE -eq 6 ]];then
          echo "Sorry, your pr need to be approved."
        elif [[ $EXCODE -eq 7 ]];then
          echo "Sorry, build failed."
        elif [[ $EXCODE -eq 8 ]];then
          echo "Sorry, some tests failed."
        elif [[ $EXCODE -eq 9 ]];then
          echo "Sorry, coverage check failed."
        fi
        # set -x
        exit $EXCODE

    - name: Terminate and delete the container
      if: always()
      run: |
        docker stop paddle-CI
        docker rm paddle-CI
